[{
    "functionId": "yfp6yfxrvvaibp5lijlmnwh4ka",
    "functionArn": "arn:aws:appsync:sa-east-1:398486365080:apis/eplrg2gzajg7vhjnwljwazwj4q/functions/yfp6yfxrvvaibp5lijlmnwh4ka",
    "name": "QuerygetApipostAuth0Function",
    "dataSourceName": "ModelsRegrasTable",
    "requestMappingTemplate": "##Verifica se o modo de autenticação é Cognito\n#if( $util.authType() == \"User Pool Authorization\" )\n\n  $util.log.info($util.toJson($ctx))\n  #if($ctx.identity.claims.email_verified)\n  \t$util.log.info(\"E-mail Verificado!\")\n  \n  #else\n  \t$util.error(\"E-mail Não verificado\")\n  #end\n\n  #set($op = $util.toJson($ctx.stash.typeName))\n  #set($op= $op.replace('\"',\"\"))\n  \n  $util.log.info(\"Operação: $op\")\n  \n\n  \n  \n  \n    #if($op == \"Query\" || $op == \"Subscription\")\n    #set($typePermission = \"R\")\n  #else\n    #set($typePermission = \"RW\")\n\n  #end\n\n  $util.log.info(\"Hello from the 1nd script\")\n\n  #if($op != \"Subscription\")\n    #set($tableName = $util.toJson($context.stash.tableName.split(\"-\")[0]))\n    $util.qr($ctx.stash.put(\"ModelName\",$tableName.replace('\"',\"\")))\n    #set($concat = $tableName.replace('\"',\"\") + $typePermission)\n    $util.log.info($tableName)\n  #else\n    ##replace the substring \"onCreate\" in fieldname in stash\n    #if($ctx.stash.fieldName.contains(\"onCreate\"))\n      $util.qr($ctx.stash.put(\"ModelName\",$ctx.stash.fieldName.replace(\"onCreate\",\"\")))\n    #elseif($ctx.stash.fieldName.contains(\"onUpdate\"))\n      $util.qr($ctx.stash.put(\"ModelName\",$ctx.stash.fieldName.replace(\"onUpdate\",\"\")))\n    #elseif($ctx.stash.fieldName.contains(\"onDelete\"))\n      $util.qr($ctx.stash.put(\"ModelName\",$ctx.stash.fieldName.replace(\"onDelete\",\"\")))\n    #end\n\n    #set($concat = $ctx.stash.ModelName + $typePermission)\n    \n\n  #end\n  $util.log.info($ctx.stash.ModelName)\n  ##verifica se é relation table tem que possuit RT no fim\n  #set( $isRT = $util.matches(\".*RT$\",$ctx.stash.ModelName) )\n  \n  #if($isRT)\n  \n   $util.log.info(\"Relational Table\")\n   $util.qr($ctx.stash.put(\"isRT\",$isRT))\n  #else\n  \t\n  \t$util.log.info(\"NOT Relational Table\")\n  #end\n  \n\n  #if($op == \"Query\" || $op == \"Subscription\")\n  \t#set($WW = $concat + \"W\")\n     #set($filter = {\"or\":[{\n    \"modelPermissaoModelName\": {\n      \"eq\": $concat\n    }},\n    {\n    \"modelPermissaoModelName\": {\n      \"eq\": $WW\n    }}\n    \n    \n  ]})\n  \n   $util.log.info(\" $concat ou $WW\")\n  #else\n  \t #set($filter = {\n    \"modelPermissaoModelName\": {\n      \"eq\": $concat\n    }})\n    $util.log.info($concat)\n\n  #end\n\n\n  $util.log.info($util.toJson($filter))\n  {\n    \"version\": \"2017-02-28\",\n    \"operation\": \"Scan\",\n    \"filter\": $util.transform.toDynamoDBFilterExpression($filter),\n    \n  }\n\n#else\n   {\n    \"version\": \"2017-02-28\",\n    \"operation\": \"Scan\"\n    }\n#end\n\n",
    "responseMappingTemplate": "#if($ctx.error)\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n\n#if( $util.authType() == \"User Pool Authorization\" )\n## Pass back the result from DynamoDB. **\n    #set( $resultado = $util.toJson($ctx.result.items)  )\n    $util.log.info($resultado)\n\n    ##Put in stash\n    $util.qr($ctx.stash.put(\"ModelsRegras\", $resultado))\n\n#end\n\n$util.toJson({})",
    "functionVersion": "2018-05-29",
    "maxBatchSize": 0
}, {
    "functionId": "zrygvo2c7rbylmkzrrvlj6hp5y",
    "functionArn": "arn:aws:appsync:sa-east-1:398486365080:apis/eplrg2gzajg7vhjnwljwazwj4q/functions/zrygvo2c7rbylmkzrrvlj6hp5y",
    "name": "QuerygetApipostAuth1Function",
    "dataSourceName": "EquipeRegrasTable",
    "requestMappingTemplate": "#if( $util.authType() == \"User Pool Authorization\" )\n  $util.log.info(\"Hello from the 2nd script \")\n\n  ## Verifica se $ctx.stash.ModelsRegras existe e não está vazio\n  #if($ctx.stash.containsKey(\"ModelsRegras\") && !$ctx.stash.ModelsRegras.isEmpty())\n    #set($parsedModelsRegras = $util.parseJson($ctx.stash.ModelsRegras))\n    $util.log.info($parsedModelsRegras)\n\n    ## Verifica se o parsedModelsRegras é uma lista e não está vazio\n    #if($parsedModelsRegras.size() > 0)\n      #set($regraNomes = [])\n      #foreach($regra in $parsedModelsRegras)\n        #set($discard = $regraNomes.add($regra.regraRegraNome))\n      #end\n\n      #set($filter = {\n        \"regraRegraNome\": { \"in\": $regraNomes },\n        \"groupCognitoGroupName\" :{\"in\": $ctx.identity.groups}\n      })\n\n      $util.log.info($util.toJson($filter))\n      \n      {\n        \"version\": \"2018-05-29\",\n        \"operation\": \"Scan\",\n        \"filter\": $util.transform.toDynamoDBFilterExpression($filter)\n      }\n    #else\n      $util.log.info(\"Não autorizado! Favor Checar Regras!\")\n      $util.unauthorized()\n      {\n        \"version\": \"2018-05-29\",\n        \"operation\": \"Scan\"\n      }\n    #end\n  #else\n    $util.log.info(\"Não autorizado! Favor Checar Regras!\")\n    $util.unauthorized()\n    {\n      \"version\": \"2018-05-29\",\n      \"operation\": \"Scan\"\n    }\n  #end\n#else\n   {\n    \"version\": \"2017-02-28\",\n    \"operation\": \"Scan\"\n    }\n#end\n",
    "responseMappingTemplate": "#if($ctx.error)\n    $util.error($ctx.error.message, $ctx.error.type)\n#end\n## Pass back the result from DynamoDB. **\n\n#if( $util.authType() == \"User Pool Authorization\" )\n\n    #set( $groupCognitoGroupNames = [] ) ## Lista para armazenar os nomes dos grupos\n\n    #foreach( $equipe in $ctx.result.items )\n        #if($equipe.containsKey(\"groupCognitoGroupName\"))\n            #set($discard = $groupCognitoGroupNames.add($equipe.groupCognitoGroupName))\n        #end\n    #end\n    $util.log.info(\"Equipes: $util.toJson($groupCognitoGroupNames) \")\n\n    $util.log.info(\"Verificando se o grupo do usuario Tem Autorizacao\n    $util.toJson($ctx.identity.groups)\" )\n\n    ##Identificando orgaização\n\n    ##define lista de organização\n    #set( $orgsNames = [] )\n    #set( $orgsGroups = [] )\n\n    #foreach( $equipe in $ctx.identity.groups)\n\n        #if($equipe.contains(\"orggroup\"))\n\n            ## $util.qr($ctx.stash.put(\"OrgGroupName\", $equipe))\n            ## $util.qr($ctx.stash.put(\"OrgName\", $equipe.replace(\"orggroup-\", \"\")))\n\n            ##add org to list\n            #set($discard = $orgsNames.add($equipe.replace(\"orggroup-\", \"\")))\n            #set($discard = $orgsGroups.add($equipe))\n\n        #end\n    #end\n    ##coloca lista de orgs no stash\n    $util.qr($ctx.stash.put(\"OrgsNames\", $orgsNames))\n    $util.qr($ctx.stash.put(\"OrgsGroups\", $orgsGroups))\n\n    ##printa\n    $util.log.info(\"OrgsNames: $util.toJson($orgsNames) \")\n    $util.log.info(\"OrgsGroups: $util.toJson($orgsGroups) \")\n\n    #foreach( $equipe in $groupCognitoGroupNames )\n\n        #if( $ctx.identity.groups.contains($equipe) )\n            #set( $isAuthorized = true )\n        #else\n            #set( $isAuthorized = false )\n            ## setar autorização como true e seguir a vida\n        #end\n    #end\n    #if( !$isAuthorized )\n        $util.unauthorized()\n    #end\n\n    ##obtendo len do nome do grupo\n    #set( $len = $orgsGroups[0].length() )\n\n    ##Printando o nome do grupo\n    $util.log.info(\"Nome do grupo: $orgsGroups[0]\")\n    $util.log.info(\"Tamanho do nome do grupo: $len\")\n\n    ## **Organização Revendedora**\n    ## orggroup-[UUID4]   \n\n    ## **Organização Cliente**\n\n    ## orggroup-[0:8 UUID da REVENDA]-[UUID4]\n\n    ## obs: UUID(1) se refere a primeira parte do UUID da revenda\n\n    ## Organização Revendedora: 44 caracteres.\n    ## Organização Cliente: 53 caracteres.\n\n    ## Se o nome do grupo tiver 44 caracteres, é uma revenda.\n    ## Se o nome do grupo tiver 53 caracteres, é um cliente.\n\n    #if( $len == 44 || $len == 45 )\n        $util.qr($ctx.stash.put(\"TipoOrg\", \"Revenda\"))\n        $util.log.info(\"Tipo de organização: Revenda\")\n        #elseif( $len == 54 )\n        $util.qr($ctx.stash.put(\"TipoOrg\", \"Cliente\"))\n        $util.log.info(\"Tipo de organização: Cliente\")\n    #else\n        $util.error(\"O nome do grupo não é válido!\")\n        $util.unauthorized()\n\n    #end\n\n    #if( $ctx.stash.TipoOrg == \"Revenda\" )\n\n        ##primeira parte do UUID da revenda\n        #set( $uuid1 = $orgsNames[0].substring(0,8) )\n        $util.log.info(\"UUID1: $uuid1\")\n\n        ##montando string para BEGINS_WITH\n        #set( $beginsWith = $uuid1 )\n        $util.log.info(\"beginsWith: $beginsWith\")\n\n        ##definindo AuthFIlter para filtrar por ORG\n        #set($dynamicField = \"org\" + $ctx.stash.ModelName + \"Id\")\n\n        #if($ctx.stash.ModelName == \"Group\")\n            $util.qr($ctx.stash.put(\"authFilter\", {\n            \"orgIdEquipe\": {\"beginsWith\": $beginsWith}\n             }))\n        #elseif( $ctx.stash.ModelName == \"Org\" || $ctx.stash.ModelName == \"EquipeRegras\" || $ctx.stash.ModelName == \"ModeloRegras\" || !$util.isNullOrEmpty($ctx.stash.isRT))\n          ## $util.qr($ctx.stash.put(\"authFilter\", {\n          ##   \"id\": {\"eq\": $ctx.stash.OrgName }\n          ## }))\n          $util.log.info(\"Não Adiciona Filtro\")\n        #else\n        $util.qr($ctx.stash.put(\"authFilter\", {\n          $dynamicField: {\"beginsWith\": $beginsWith}\n        }))\n        #end\n\n      ## Definindo condições personalizadas para mutations baseadas na ORG\n      #set($dynamicConditionField = \"org\" + $ctx.stash.ModelName + \"Id\")\n\n      #set($ctx.stash.conditions = $util.defaultIfNull($ctx.stash.conditions, []))\n      $util.log.info($ctx.stash.fieldName)\n      ##printa $ctx.args.input.orgIdEquipe\n      $util.log.info($ctx.args.input[$dynamicConditionField])\n\n      #set( $beginsWitharget =  $ctx.args.input[$dynamicConditionField].substring(0,8))\n      $util.log.info(\"BorgTarget: $beginsWith $beginsWitharget\")\n      ##printa $ctx.stash.OrgsNames[0]\n      $util.log.info($ctx.stash.OrgsNames[0])\n\n      #if(!$ctx.stash.fieldName.startsWith(\"create\"))\n          #if($ctx.stash.ModelName == \"Group\")\n              $util.qr($ctx.stash.conditions.add({\n                \"orgIdEquipe\": {\n                    \"beginsWith\": $beginsWith\n                }\n              }))\n          #elseif( $ctx.stash.ModelName == \"Org\" || $ctx.stash.ModelName == \"EquipeRegras\" || $ctx.stash.ModelName == \"ModeloRegras\" || !$util.isNullOrEmpty($ctx.stash.isRT))\n              $util.log.info(\"Não Adiciona Filtro\")\n          #else\n              $util.qr($ctx.stash.conditions.add({\n                $dynamicConditionField: {\n                    \"beginsWith\": $beginsWith\n                }\n              }))\n          #end\n      #elseif($ctx.args.input[$dynamicConditionField] == $ctx.stash.OrgsNames[0] || $beginsWith==$beginsWitharget || !$util.isNullOrEmpty($ctx.stash.isRT))\n          $util.log.info(\"Operação de create realizada!\")\n      #else\n          $util.error(\"Você está tentando criar um registro que não faz parte da sua organização!\")\n        $util.unauthorized()\n      #end\n\n  #elseif( $ctx.stash.TipoOrg == \"Cliente\" )\n\n    ##primeira parte do UUID da revenda\n    #set( $uuid1 = $orgsNames[0].substring(0,8) )\n    $util.log.info(\"UUID1: $uuid1\")\n\n    ##montando string para BEGINS_WITH\n    #set( $beginsWith = \"orggroup-\" + $uuid1 )\n    $util.log.info(\"beginsWith: $beginsWith\")\n\n    ##tirando primeiro hifen do orgnames fMCPD393-d29708d5-ec89-4a3d-9f9e-648ee4ff4b7f ----> fMCPD393d29708d5-ec89-4a3d-9f9e-648ee4ff4b7f\n    #set( $newOrgName = $ctx.stash.OrgsNames[0].substring(0,8) + $ctx.stash.OrgsNames[0].substring(9,$ctx.stash.OrgsNames[0].length()) )\n    \n\n    $util.qr($ctx.stash.OrgsNames.add($newOrgName))\n\n    $util.log.info($ctx.stash.OrgsNames)\n\n    ##definindo AuthFIlter para filtrar por ORG\n    #set($dynamicField = \"org\" + $ctx.stash.ModelName + \"Id\")\n\n    #if($ctx.stash.ModelName == \"Group\")\n    $util.qr($ctx.stash.put(\"authFilter\", {\n      \"orgIdEquipe\": {\"in\": $ctx.stash.OrgsNames}\n    }))\n    #elseif( $ctx.stash.ModelName == \"Org\" || $ctx.stash.ModelName == \"EquipeRegras\" || $ctx.stash.ModelName == \"ModeloRegras\" || !$util.isNullOrEmpty($ctx.stash.isRT))\n\n    ## $util.qr($ctx.stash.put(\"authFilter\", {\n    ##   \"id\": {\"eq\": $ctx.stash.OrgName }\n    ## }))\n    $util.log.info(\"Não Adiciona Filtro\")\n    #else\n    $util.qr($ctx.stash.put(\"authFilter\", {\n      $dynamicField: {\"in\": $ctx.stash.OrgsNames}\n    }))\n    #end\n\n    ## Definindo condições personalizadas para mutations baseadas na ORG\n    #set($dynamicConditionField = \"org\" + $ctx.stash.ModelName + \"Id\")\n\n    #set($ctx.stash.conditions = $util.defaultIfNull($ctx.stash.conditions, []))\n    $util.log.info($ctx.stash.fieldName)\n    ##printa $ctx.args.input.orgIdEquipe\n    $util.log.info($ctx.args.input[$dynamicConditionField])\n\n\n    \n    ##printa $ctx.stash.OrgsNames[0]\n    $util.log.info($ctx.stash.OrgsNames[0])\n\n    #if(!$ctx.stash.fieldName.startsWith(\"create\"))\n        #if($ctx.stash.ModelName == \"Group\")\n            $util.qr($ctx.stash.conditions.add({\n              \"orgIdEquipe\": {\n                  \"in\": $ctx.stash.OrgsNames\n              }\n            }))\n        #elseif( $ctx.stash.ModelName == \"Org\" || $ctx.stash.ModelName == \"EquipeRegras\" || $ctx.stash.ModelName == \"ModeloRegras\" || !$util.isNullOrEmpty($ctx.stash.isRT))\n            $util.log.info(\"Não Adiciona Filtro\")\n        #else\n            $util.qr($ctx.stash.conditions.add({\n              $dynamicConditionField: {\n                  \"in\": $ctx.stash.OrgsNames\n              }\n            }))\n        #end\n    #elseif($ctx.args.input[$dynamicConditionField] == $ctx.stash.OrgsNames[0] || !$util.isNullOrEmpty($ctx.stash.isRT))\n        $util.log.info(\"Operação de create realizada!\")\n    #else\n        $util.error(\"Você está tentando criar um registro que não faz parte da sua organização!\")\n      \t$util.unauthorized()\n    #end\n\n\n  #end\n\n#end\n\n\n$util.qr($ctx.args.put(\"limit\", 1000000000))\n\n\n$util.log.info($util.toJson($context.stash))\n$util.toJson({})",
    "functionVersion": "2018-05-29",
    "maxBatchSize": 0
}

]